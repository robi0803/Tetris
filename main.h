#include <SDL.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

SDL_Window *window;
SDL_Renderer *renderer;
SDL_Event event;
int width, height;

int pressedKeys[SDL_NUM_SCANCODES];
int releasedKeys[SDL_NUM_SCANCODES];
int slowFallTime, fastFallTime, fallTime, timeElapsed;
int quit, level, score, totalLinesCleared;

int bgInPlay[21][12];
int bg[21][12] = {
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 1
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 2
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 3
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 4
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 5
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 6
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 7
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 8
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 9
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 10
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 11
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 12
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 13
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 14
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 15
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 16
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 17
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 18
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 19
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 20
  {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // 21
};

int blocks[7][4][4] = {
  { // o
          {0, 0, 0, 0},
          {0, 1, 1, 0},
	  {0, 1, 1, 0},
	  {0, 0, 0, 0}
  },
  { // i
          {0, 0, 1, 0},
	  {0, 0, 1, 0},
	  {0, 0, 1, 0},
	  {0, 0, 1, 0}
  },
  { // l
          {0, 1, 0, 0},
	  {0, 1, 0, 0},
	  {0, 1, 0, 0},
	  {0, 1, 1, 0}
  },
  { // j
          {0, 0, 1, 0},
	  {0, 0, 1, 0},
	  {0, 0, 1, 0}, 
	  {0, 1, 1, 0}
  },
  { // s
          {0, 0, 0, 0},
	  {0, 0, 1, 1},
	  {0, 1, 1, 0},
	  {0, 0, 0, 0}
  },
  { // z
          {0, 0, 0, 0},
	  {0, 1, 1, 0},
	  {0, 0, 1, 1},
	  {0, 0, 0, 0}
  },
  { // t
          {0, 0, 0, 0},
	  {0, 1, 1, 1},
	  {0, 0, 1, 0},
	  {0, 0, 0, 0}
  }
};

int currentBlock;
typedef struct { int x, y, color, shape[4][4]; } Block;
Block *blocksInPlay[2];
Block *newBlock(int i, int j)
{
  Block *p = malloc(sizeof(Block));
  p->x = i;
  p->y = j;
  p->color = (rand() % 7) + 1;
  memcpy(p->shape, blocks[p->color - 1], sizeof(int) * 16);
  return p;
}
